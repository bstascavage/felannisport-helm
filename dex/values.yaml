# Default values for dex
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value

image: quay.io/dexidp/dex
imageTag: "v2.21.0"
imagePullPolicy: "IfNotPresent"

inMiniKube: false

nodeSelector: {}

podAnnotations: {}

initContainers: []

tolerations: []
  # - key: CriticalAddonsOnly
  #   operator: Exists
  # - key: foo
  #   operator: Equal
  #   value: bar
  #   effect: NoSchedule

replicas: 1

# resources:
  # limits:
    # cpu: 100m
    # memory: 50Mi
  # requests:
    # cpu: 100m
    # memory: 50Mi

# grpc support
grpc: true

# https termination by dex itself
https: false

ports:
  web:
    containerPort: 8080
    protocol: TCP
    nodePort: 32000
    servicePort: 32000
# Relevant only when grpc support is enabled
  grpc:
    containerPort: 5000
    protocol: TCP
    nodePort: 35000
    servicePort: 35000

livenessProbe:
  enabled: true
  initialDelaySeconds: 1
  failureThreshold: 1
  httpPath: "/healthz"
  periodSeconds: 10
  timeoutSeconds: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 1
  failureThreshold: 1
  httpPath: "/healthz"
  periodSeconds: 10
  timeoutSeconds: 1

service:
  type: LoadBalancer

ingress:
  enabled: true
  annotations:
    ingress.kubernetes.io/ssl-redirect: "true"
    #kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: letsencrypt
    kubernetes.io/ingress.class: "nginx"
  path: /
  hosts:
    - dex.felannisport.com
  tls:
    - secretName: letsencrypt-dex-tls
      hosts:
        - dex.felannisport.com

extraVolumes: []
extraVolumeMounts: []

certs:
  securityContext:
    enabled: true
    runAsUser: 65534
    fsGroup: 65534
  image: gcr.io/google_containers/kubernetes-dashboard-init-amd64
  imageTag: "v1.0.0"
  imagePullPolicy: "IfNotPresent"
  # Section below is relevant only when https termination is enabled
  web:
    create: true
    activeDeadlineSeconds: 300
    caDays: 10000
    certDays: 10000
    altNames:
      - dex.io
    altIPs: {}
    secret:
      tlsName: dex-web-server-tls
      caName: dex-web-server-ca
    pod:
      annotations: {}
  # Section below is relevant only when grpc support is enabled
  grpc:
    create: true
    activeDeadlineSeconds: 300
    altNames:
      - dex.io
    altIPs: {}
    secret:
      serverTlsName: dex-grpc-server-tls
      clientTlsName: dex-grpc-client-tls
      caName: dex-grpc-ca
    pod:
      annotations: {}

env:
 - name: GOOGLE_CLIENT_ID
   valueFrom:
     secretKeyRef:
       name: google-oidc
       key: client_id
 - name: GOOGLE_CLIENT_SECRET
   valueFrom:
     secretKeyRef:
       name: google-oidc
       key: client_secret

rbac:
  # Specifies whether RBAC resources should be created
  create: true

crd:
  # Specifies whether dex's CRDs are already present (if not cluster role and cluster role binding will be created
  # to enable dex to create them). Depends on rbac.create
  present: false

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

affinity: {}
  # podAntiAffinity:
  #   preferredDuringSchedulingIgnoredDuringExecution:
  #   - weight: 5
  #     podAffinityTerm:
  #       topologyKey: "kubernetes.io/hostname"
  #       labelSelector:
  #         matchLabels:
  #           app: {{ template "dex.name" . }}
  #           release: "{{ .Release.Name }}"


podDisruptionBudget: {}
  # maxUnavailable: 1

config:
  issuer: https://dex.felannisport.com
  storage:
    type: kubernetes
    config:
      inCluster: true
  logger:
    level: debug
  web:
    # port is taken from ports section above
    address: 0.0.0.0
#    tlsCert: /etc/dex/tls/https/server/tls.crt
#    tlsKey: /etc/dex/tls/https/server/tls.key
# Section below is relevant only when grpc support is enabled
  grpc:
    # port is taken from ports section above
    address: 0.0.0.0
#    tlsCert: /etc/dex/tls/grpc/server/tls.crt
#    tlsKey: /etc/dex/tls/grpc/server/tls.key
#    tlsClientCA: /etc/dex/tls/grpc/ca/tls.crt
  connectors:
  - type: oidc
    id: google
    name: Google
    config:
      issuer: https://accounts.google.com
      clientID: $GOOGLE_CLIENT_ID
      clientSecret: $GOOGLE_CLIENT_SECRET
      redirectURI: https://dex.felannisport.com/callback
      hostedDomains:
        - stascavage.com
  oauth2:
    alwaysShowLoginScreen: false
    skipApprovalScreen: true

#  expiry:
#    signingKeys: "6h"
#    idTokens: "24h"

#  staticClients:
#  - id: example-app
#    redirectURIs:
#    - 'http://192.168.42.219:31850/oauth2/callback'
#    name: 'Example App'
#    secret: ZXhhbXBsZS1hcHAtc2VjcmV0
#
  enablePasswordDB: true
#  staticPasswords:
#   - email: "admin@example.com"
#     # bcrypt hash of the string "password"
#     hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
#     username: "admin"
#     userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"

# frontend:
#   logoURL: https://example.com/yourlogo.png

  staticClients:
  - id: dex-secret
    name: dex-secret
    secret: ZXhhbXBsZS1hcHAtc2VjcmV0
    redirectURIs:
    - "https://login.felannisport.com/callback/"
  - id: dex-secret-argocd
    name: dex-argocd
    secret: ZXhhbXBsZS1hcHAtc2VjcmV0
    redirectURIs:
    - "https://argocd.felannisport.com/auth/callback"
    - "http://localhost:8085/auth/callback"
  - id: dex-grafana
    name: dex-grafana
    secret: ZXhhbXBsZS1hcHAtc2VjcmV0sdleojfdpoounwes
    redirectURIs:
    - "https://grafana.felannisport.com/login/generic_oauth"
